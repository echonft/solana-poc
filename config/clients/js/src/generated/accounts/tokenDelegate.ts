/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type TokenDelegate = Account<TokenDelegateAccountData>;

export type TokenDelegateAccountData = {
  mint: PublicKey;
  owner: PublicKey;
  bump: number;
};

export type TokenDelegateAccountDataArgs = TokenDelegateAccountData;

export function getTokenDelegateAccountDataSerializer(): Serializer<
  TokenDelegateAccountDataArgs,
  TokenDelegateAccountData
> {
  return struct<TokenDelegateAccountData>(
    [
      ['mint', publicKeySerializer()],
      ['owner', publicKeySerializer()],
      ['bump', u8()],
    ],
    { description: 'TokenDelegateAccountData' }
  ) as Serializer<TokenDelegateAccountDataArgs, TokenDelegateAccountData>;
}

export function deserializeTokenDelegate(
  rawAccount: RpcAccount
): TokenDelegate {
  return deserializeAccount(
    rawAccount,
    getTokenDelegateAccountDataSerializer()
  );
}

export async function fetchTokenDelegate(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenDelegate> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TokenDelegate');
  return deserializeTokenDelegate(maybeAccount);
}

export async function safeFetchTokenDelegate(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenDelegate | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTokenDelegate(maybeAccount) : null;
}

export async function fetchAllTokenDelegate(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenDelegate[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenDelegate');
    return deserializeTokenDelegate(maybeAccount);
  });
}

export async function safeFetchAllTokenDelegate(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenDelegate[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeTokenDelegate(maybeAccount as RpcAccount)
    );
}

export function getTokenDelegateGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solana',
    '251VpQ2e7acPSqM4m7DRoUMpfX9mEtFXHjbYRx2C5JGX'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ mint: PublicKey; owner: PublicKey; bump: number }>({
      mint: [0, publicKeySerializer()],
      owner: [32, publicKeySerializer()],
      bump: [64, u8()],
    })
    .deserializeUsing<TokenDelegate>((account) =>
      deserializeTokenDelegate(account)
    );
}

export function getTokenDelegateSize(): number {
  return 65;
}
