/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ClusterFilter,
  Context,
  Program,
  PublicKey,
} from '@metaplex-foundation/umi';
import { getSolanaErrorFromCode, getSolanaErrorFromName } from '../errors';

export const SOLANA_PROGRAM_ID =
  '251VpQ2e7acPSqM4m7DRoUMpfX9mEtFXHjbYRx2C5JGX' as PublicKey<'251VpQ2e7acPSqM4m7DRoUMpfX9mEtFXHjbYRx2C5JGX'>;

export function createSolanaProgram(): Program {
  return {
    name: 'solana',
    publicKey: SOLANA_PROGRAM_ID,
    getErrorFromCode(code: number, cause?: Error) {
      return getSolanaErrorFromCode(code, this, cause);
    },
    getErrorFromName(name: string, cause?: Error) {
      return getSolanaErrorFromName(name, this, cause);
    },
    isOnCluster() {
      return true;
    },
  };
}

export function getSolanaProgram<T extends Program = Program>(
  context: Pick<Context, 'programs'>,
  clusterFilter?: ClusterFilter
): T {
  return context.programs.get<T>('solana', clusterFilter);
}

export function getSolanaProgramId(
  context: Pick<Context, 'programs'>,
  clusterFilter?: ClusterFilter
): PublicKey {
  return context.programs.getPublicKey(
    'solana',
    SOLANA_PROGRAM_ID,
    clusterFilter
  );
}
